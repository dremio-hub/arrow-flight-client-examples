// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/arrow-go/v18/arrow/flight (interfaces: Client)

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	flight "github.com/apache/arrow-go/v18/arrow/flight/gen/flight"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockClient) Authenticate(arg0 context.Context, arg1 ...grpc.CallOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Authenticate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockClientMockRecorder) Authenticate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockClient)(nil).Authenticate), varargs...)
}

// AuthenticateBasicToken mocks base method.
func (m *MockClient) AuthenticateBasicToken(arg0 context.Context, arg1, arg2 string, arg3 ...grpc.CallOption) (context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthenticateBasicToken", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateBasicToken indicates an expected call of AuthenticateBasicToken.
func (mr *MockClientMockRecorder) AuthenticateBasicToken(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateBasicToken", reflect.TypeOf((*MockClient)(nil).AuthenticateBasicToken), varargs...)
}

// CancelFlightInfo mocks base method.
func (m *MockClient) CancelFlightInfo(arg0 context.Context, arg1 *flight.CancelFlightInfoRequest, arg2 ...grpc.CallOption) (*flight.CancelFlightInfoResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelFlightInfo", varargs...)
	ret0, _ := ret[0].(*flight.CancelFlightInfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelFlightInfo indicates an expected call of CancelFlightInfo.
func (mr *MockClientMockRecorder) CancelFlightInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelFlightInfo", reflect.TypeOf((*MockClient)(nil).CancelFlightInfo), varargs...)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// CloseSession mocks base method.
func (m *MockClient) CloseSession(arg0 context.Context, arg1 *flight.CloseSessionRequest, arg2 ...grpc.CallOption) (*flight.CloseSessionResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CloseSession", varargs...)
	ret0, _ := ret[0].(*flight.CloseSessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockClientMockRecorder) CloseSession(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockClient)(nil).CloseSession), varargs...)
}

// DoAction mocks base method.
func (m *MockClient) DoAction(arg0 context.Context, arg1 *flight.Action, arg2 ...grpc.CallOption) (flight.FlightService_DoActionClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoAction", varargs...)
	ret0, _ := ret[0].(flight.FlightService_DoActionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoAction indicates an expected call of DoAction.
func (mr *MockClientMockRecorder) DoAction(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoAction", reflect.TypeOf((*MockClient)(nil).DoAction), varargs...)
}

// DoExchange mocks base method.
func (m *MockClient) DoExchange(arg0 context.Context, arg1 ...grpc.CallOption) (flight.FlightService_DoExchangeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoExchange", varargs...)
	ret0, _ := ret[0].(flight.FlightService_DoExchangeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoExchange indicates an expected call of DoExchange.
func (mr *MockClientMockRecorder) DoExchange(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoExchange", reflect.TypeOf((*MockClient)(nil).DoExchange), varargs...)
}

// DoGet mocks base method.
func (m *MockClient) DoGet(arg0 context.Context, arg1 *flight.Ticket, arg2 ...grpc.CallOption) (flight.FlightService_DoGetClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoGet", varargs...)
	ret0, _ := ret[0].(flight.FlightService_DoGetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGet indicates an expected call of DoGet.
func (mr *MockClientMockRecorder) DoGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGet", reflect.TypeOf((*MockClient)(nil).DoGet), varargs...)
}

// DoPut mocks base method.
func (m *MockClient) DoPut(arg0 context.Context, arg1 ...grpc.CallOption) (flight.FlightService_DoPutClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoPut", varargs...)
	ret0, _ := ret[0].(flight.FlightService_DoPutClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoPut indicates an expected call of DoPut.
func (mr *MockClientMockRecorder) DoPut(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoPut", reflect.TypeOf((*MockClient)(nil).DoPut), varargs...)
}

// GetFlightInfo mocks base method.
func (m *MockClient) GetFlightInfo(arg0 context.Context, arg1 *flight.FlightDescriptor, arg2 ...grpc.CallOption) (*flight.FlightInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFlightInfo", varargs...)
	ret0, _ := ret[0].(*flight.FlightInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightInfo indicates an expected call of GetFlightInfo.
func (mr *MockClientMockRecorder) GetFlightInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightInfo", reflect.TypeOf((*MockClient)(nil).GetFlightInfo), varargs...)
}

// GetSchema mocks base method.
func (m *MockClient) GetSchema(arg0 context.Context, arg1 *flight.FlightDescriptor, arg2 ...grpc.CallOption) (*flight.SchemaResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchema", varargs...)
	ret0, _ := ret[0].(*flight.SchemaResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockClientMockRecorder) GetSchema(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockClient)(nil).GetSchema), varargs...)
}

// GetSessionOptions mocks base method.
func (m *MockClient) GetSessionOptions(arg0 context.Context, arg1 *flight.GetSessionOptionsRequest, arg2 ...grpc.CallOption) (*flight.GetSessionOptionsResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionOptions", varargs...)
	ret0, _ := ret[0].(*flight.GetSessionOptionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionOptions indicates an expected call of GetSessionOptions.
func (mr *MockClientMockRecorder) GetSessionOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionOptions", reflect.TypeOf((*MockClient)(nil).GetSessionOptions), varargs...)
}

// Handshake mocks base method.
func (m *MockClient) Handshake(arg0 context.Context, arg1 ...grpc.CallOption) (flight.FlightService_HandshakeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handshake", varargs...)
	ret0, _ := ret[0].(flight.FlightService_HandshakeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handshake indicates an expected call of Handshake.
func (mr *MockClientMockRecorder) Handshake(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handshake", reflect.TypeOf((*MockClient)(nil).Handshake), varargs...)
}

// ListActions mocks base method.
func (m *MockClient) ListActions(arg0 context.Context, arg1 *flight.Empty, arg2 ...grpc.CallOption) (flight.FlightService_ListActionsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListActions", varargs...)
	ret0, _ := ret[0].(flight.FlightService_ListActionsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActions indicates an expected call of ListActions.
func (mr *MockClientMockRecorder) ListActions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActions", reflect.TypeOf((*MockClient)(nil).ListActions), varargs...)
}

// ListFlights mocks base method.
func (m *MockClient) ListFlights(arg0 context.Context, arg1 *flight.Criteria, arg2 ...grpc.CallOption) (flight.FlightService_ListFlightsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFlights", varargs...)
	ret0, _ := ret[0].(flight.FlightService_ListFlightsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlights indicates an expected call of ListFlights.
func (mr *MockClientMockRecorder) ListFlights(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlights", reflect.TypeOf((*MockClient)(nil).ListFlights), varargs...)
}

// PollFlightInfo mocks base method.
func (m *MockClient) PollFlightInfo(arg0 context.Context, arg1 *flight.FlightDescriptor, arg2 ...grpc.CallOption) (*flight.PollInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PollFlightInfo", varargs...)
	ret0, _ := ret[0].(*flight.PollInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PollFlightInfo indicates an expected call of PollFlightInfo.
func (mr *MockClientMockRecorder) PollFlightInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollFlightInfo", reflect.TypeOf((*MockClient)(nil).PollFlightInfo), varargs...)
}

// RenewFlightEndpoint mocks base method.
func (m *MockClient) RenewFlightEndpoint(arg0 context.Context, arg1 *flight.RenewFlightEndpointRequest, arg2 ...grpc.CallOption) (*flight.FlightEndpoint, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenewFlightEndpoint", varargs...)
	ret0, _ := ret[0].(*flight.FlightEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewFlightEndpoint indicates an expected call of RenewFlightEndpoint.
func (mr *MockClientMockRecorder) RenewFlightEndpoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewFlightEndpoint", reflect.TypeOf((*MockClient)(nil).RenewFlightEndpoint), varargs...)
}

// SetSessionOptions mocks base method.
func (m *MockClient) SetSessionOptions(arg0 context.Context, arg1 *flight.SetSessionOptionsRequest, arg2 ...grpc.CallOption) (*flight.SetSessionOptionsResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSessionOptions", varargs...)
	ret0, _ := ret[0].(*flight.SetSessionOptionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSessionOptions indicates an expected call of SetSessionOptions.
func (mr *MockClientMockRecorder) SetSessionOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionOptions", reflect.TypeOf((*MockClient)(nil).SetSessionOptions), varargs...)
}
