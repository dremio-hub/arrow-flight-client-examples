// Code generated by MockGen. DO NOT EDIT.
// Source: example.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	flight "github.com/apache/arrow-go/v18/arrow/flight"
	flight0 "github.com/apache/arrow-go/v18/arrow/flight/gen/flight"
	gomock "github.com/golang/mock/gomock"
)

// MockFlightClient is a mock of FlightClient interface.
type MockFlightClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlightClientMockRecorder
}

// MockFlightClientMockRecorder is the mock recorder for MockFlightClient.
type MockFlightClientMockRecorder struct {
	mock *MockFlightClient
}

// NewMockFlightClient creates a new mock instance.
func NewMockFlightClient(ctrl *gomock.Controller) *MockFlightClient {
	mock := &MockFlightClient{ctrl: ctrl}
	mock.recorder = &MockFlightClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightClient) EXPECT() *MockFlightClientMockRecorder {
	return m.recorder
}

// AuthenticateBasicToken mocks base method.
func (m *MockFlightClient) AuthenticateBasicToken(ctx context.Context, user, pass string) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateBasicToken", ctx, user, pass)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateBasicToken indicates an expected call of AuthenticateBasicToken.
func (mr *MockFlightClientMockRecorder) AuthenticateBasicToken(ctx, user, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateBasicToken", reflect.TypeOf((*MockFlightClient)(nil).AuthenticateBasicToken), ctx, user, pass)
}

// Close mocks base method.
func (m *MockFlightClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFlightClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFlightClient)(nil).Close))
}

// CloseSession mocks base method.
func (m *MockFlightClient) CloseSession(ctx context.Context, req *flight.CloseSessionRequest) (*flight.CloseSessionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSession", ctx, req)
	ret0, _ := ret[0].(*flight.CloseSessionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockFlightClientMockRecorder) CloseSession(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockFlightClient)(nil).CloseSession), ctx, req)
}

// DoGet mocks base method.
func (m *MockFlightClient) DoGet(ctx context.Context, ticket *flight0.Ticket) (flight.FlightService_DoGetClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGet", ctx, ticket)
	ret0, _ := ret[0].(flight.FlightService_DoGetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoGet indicates an expected call of DoGet.
func (mr *MockFlightClientMockRecorder) DoGet(ctx, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGet", reflect.TypeOf((*MockFlightClient)(nil).DoGet), ctx, ticket)
}

// GetFlightInfo mocks base method.
func (m *MockFlightClient) GetFlightInfo(ctx context.Context, desc *flight.FlightDescriptor) (*flight0.FlightInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlightInfo", ctx, desc)
	ret0, _ := ret[0].(*flight0.FlightInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlightInfo indicates an expected call of GetFlightInfo.
func (mr *MockFlightClientMockRecorder) GetFlightInfo(ctx, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlightInfo", reflect.TypeOf((*MockFlightClient)(nil).GetFlightInfo), ctx, desc)
}

// GetSchema mocks base method.
func (m *MockFlightClient) GetSchema(ctx context.Context, desc *flight.FlightDescriptor) (*flight0.SchemaResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", ctx, desc)
	ret0, _ := ret[0].(*flight0.SchemaResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockFlightClientMockRecorder) GetSchema(ctx, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockFlightClient)(nil).GetSchema), ctx, desc)
}

// SetSessionOptions mocks base method.
func (m *MockFlightClient) SetSessionOptions(ctx context.Context, req *flight.SetSessionOptionsRequest) (*flight.SetSessionOptionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSessionOptions", ctx, req)
	ret0, _ := ret[0].(*flight.SetSessionOptionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSessionOptions indicates an expected call of SetSessionOptions.
func (mr *MockFlightClientMockRecorder) SetSessionOptions(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionOptions", reflect.TypeOf((*MockFlightClient)(nil).SetSessionOptions), ctx, req)
}
